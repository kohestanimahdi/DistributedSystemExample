@page "/flights"


@using DistributedSystems.Web.Data
@inject WeatherForecastService ForecastService
@inject grpcServices grpcServices

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<EditForm class="container" Model="Model">
    <DataAnnotationsValidator />

    <DntInputText @bind-Value="Model.Name"
                  LabelName="نام کاربری"
                  FieldIcon="bi-person-circle" />

    <DntInputPersianDate @bind-Value="Model.BirthDayGregorian"
                         LabelName="تاریخ تولد"
                         FieldIcon="bi-calendar"
                         ShowCalendarOnFocus="true"
                         BeginningOfCentury="1400"
                         CalendarFromYear="1350"
                         CalendarToYear="1450"
                         UsePersianNumbers="true"
                         CalendarShowHolidays="true"
                         CalendarShowTodayButton="true"
                         CalendarUseShortPersianDayNamesOfWeek="true" />


    <button type="button" class="btn btn-primary btn-lg" @onclick="DoSave">ارسال</button>
</EditForm>

<button class="btn btn-primary" @onclick="DoSave">Click me</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private DateTime selectedDate;
    private test Model = new test();
    private class test
    {
        public string Name;
        public DateTime BirthDayGregorian;
    }
    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        await grpcServices.GetAirportsAsync();
    }

    private void DoSave()
    {
        Console.WriteLine(Model.Name);
        Console.WriteLine(Model.BirthDayGregorian);

    }
}
